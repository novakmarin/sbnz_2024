package simple;

import com.ftn.sbnz.model.models.*;
import java.util.Date;
import java.util.Calendar;
import java.util.List;

rule "Add Complex Symptoms to Patients"
when
    $patient : Patient($symptoms : currentSymptoms)

    $parentSymptom : Symptom(hasSpecialDiagnostics == false, childSymptoms != null, childSymptoms.size() > 0)

    eval($symptoms.containsAll($parentSymptom.getChildSymptoms()))    

    not Symptom(id == $parentSymptom.id) from $symptoms
then
    $patient.getCurrentSymptoms().add($parentSymptom);
    System.out.println("RULE 1: Symptom " + $parentSymptom.getName() + " added to patient " + $patient.getFirstName() + " " + $patient.getLastName());
    System.out.println($patient);
    update($patient);
end


rule "Identify Chronic GAD Based on Patient History"
when
    $gadSymptom : Symptom(name == "Generalizovani anksiozni poremećaj")

	$patient : Patient($patientSymptoms : currentSymptoms)
    $symptom : Symptom(name == "Anksioznost") from $patientSymptoms
    
    $appointment : Appointment(patient == $patient, 
                               date.before(monthsAgo(-6)) == true,
                               currentSymptoms != null,
                               currentSymptoms.size() > 0)
                               
    $oldSymptom : Symptom(name == "Anksioznost") from $appointment.currentSymptoms

    //$otherSymptom : Symptom(name != "Anksioznost") from $gadSymptom.childSymptoms

    not Symptom(id == $gadSymptom.id) from $patientSymptoms
    not Symptom(id == $gadSymptom.id) from $appointment.currentSymptoms
    
    $sNo: Number(intValue >= 2) from accumulate(
        $s1: Symptom(name != "Anksioznost") from $patient.currentSymptoms,
        init(int count = 0;),
        action( if ($gadSymptom.getChildSymptoms().contains($s1)) count++;),
        result(count)
    )

then
    System.out.println("RULE 2: Symptom GAD added to patient " + $patient.getFirstName() + " " + $patient.getLastName());
    System.out.println($appointment);
    System.out.println($sNo);
    //$appointment.getCurrentSymptoms().add($gadSymptom);
    $patient.getCurrentSymptoms().add($gadSymptom);
end

rule "Identify manic episode"
when
    $manicSymptom : Symptom(name == "Manična epizoda")

	$patient : Patient($patientSymptoms : currentSymptoms)

    not Symptom(id == $manicSymptom.id) from $patientSymptoms
    
    $sNo: Number(intValue >= 4) from accumulate(
        $s1: Symptom() from $patient.currentSymptoms,
        init(int count = 0;),
        action( if ($manicSymptom.getChildSymptoms().contains($s1)) count++;),
        result(count)
    )

then
    System.out.println("RULE 3: Symptom manic episode added to patient " + $patient.getFirstName() + " " + $patient.getLastName());
    System.out.println($sNo);
    $patient.getCurrentSymptoms().add($manicSymptom);
end

query hasASymptom(Patient patient, Symptom symptom)
    $symptom: Symptom( symptom.name; ) from patient.currentSymptoms
    or
    //mozda current
    ($newParent: Symptom() from patient.currentSymptoms
    and
    //$symptom1: Symptom( symptom.name; )
    isASubsymptomOf(symptom, $newParent;))
end

query isASubsymptomOf(Symptom child, Symptom parent)
    $parentSymptom: Symptom( parent.name; childSymptoms != null)
    Symptom( child.name; ) from $parentSymptom.childSymptoms
    or
    ($subsymptom: Symptom() from $parentSymptom.childSymptoms
    and
    //vrv greska arg 2
    eval($subsymptom != null)
    and
    isASubsymptomOf(child, $subsymptom;))
end

rule "Getting patient with a symptom"
lock-on-active true
when
    $patients: List()
    $symptomName: String()
    $p: Patient()
    $s: Symptom(name == $symptomName)
    not Patient( id == $p.id) from $patients
    //$s1: Symptom(name == "Briga")
    //$s2: Symptom(name == "Socijalna anksioznost")
    hasASymptom( $p, $s; )
    //isASubsymptomOf( $s1, $s2; )
then
    System.out.println("\nRULE 4 BACKWARDS: Patient:");
    System.out.println($p.getFirstName() + " " + $p.getLastName());
    System.out.println("has " + $s.getName() + ".\n");
    modify($patients){ add($p) }
end